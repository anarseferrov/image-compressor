{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","args","compressImage","bind","handleChange","state","maxSizeMB","maxWidthOrHeight","webWorker","progress","inputSize","outputSize","inputUrl","outputUrl","mainThread","target","e","setState","currentTarget","value","p","useWebWorker","targetName","this","prevState","event","file","files","console","log","imageCompression","getExifOrientation","size","toFixed","URL","createObjectURL","options","onProgress","output","className","htmlFor","type","id","name","onChange","accept","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e62e986.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport imageCompression from \"browser-image-compression\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.compressImage = this.compressImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1024,\n      webWorker: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null,\n      },\n      mainThread: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null,\n      },\n    };\n  }\n\n  handleChange(target) {\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value });\n    };\n  }\n\n  onProgress(p, useWebWorker) {\n    const targetName = useWebWorker ? \"webWorker\" : \"mainThread\";\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        progress: p,\n      },\n    }));\n  }\n\n  async compressImage(event, useWebWorker) {\n    const file = event.target.files[0];\n    console.log(\"input\", file);\n    console.log(\n      \"ExifOrientation\",\n      await imageCompression.getExifOrientation(file)\n    );\n    const targetName = useWebWorker ? \"webWorker\" : \"mainThread\";\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file),\n      },\n    }));\n    var options = {\n      maxSizeMB: this.state.maxSizeMB,\n      maxWidthOrHeight: this.state.maxWidthOrHeight,\n      useWebWorker,\n      onProgress: (p) => this.onProgress(p, useWebWorker),\n    };\n    const output = await imageCompression(file, options);\n    console.log(\"output\", output);\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(2),\n        outputUrl: URL.createObjectURL(output),\n      },\n    }));\n  }\n\n  render() {\n    const { webWorker, mainThread, maxSizeMB, maxWidthOrHeight } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          Options:\n          <br />\n          <label htmlFor=\"maxSizeMB\">\n            maxSizeMB:{\" \"}\n            <input\n              type=\"number\"\n              id=\"maxSizeMB\"\n              name=\"maxSizeMB\"\n              value={maxSizeMB}\n              onChange={this.handleChange(\"maxSizeMB\")}\n            />\n          </label>\n          <br />\n          <label htmlFor=\"maxWidthOrHeight\">\n            maxWidthOrHeight:{\" \"}\n            <input\n              type=\"number\"\n              id=\"maxWidthOrHeight\"\n              name=\"maxWidthOrHeight\"\n              value={maxWidthOrHeight}\n              onChange={this.handleChange(\"maxWidthOrHeight\")}\n            />\n          </label>\n          <hr />\n          <label htmlFor=\"web-worker\">\n            Compress in web-worker{\" \"}\n            {webWorker.progress && <span>{webWorker.progress} %</span>}\n            <input\n              id=\"web-worker\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => this.compressImage(e, true)}\n            />\n          </label>\n          <p>\n            {webWorker.inputSize && (\n              <span>Source image size: {webWorker.inputSize} mb</span>\n            )}\n            {webWorker.outputSize && (\n              <span>, Output image size: {webWorker.outputSize}</span>\n            )}\n          </p>\n        </div>\n        <div>\n          <label htmlFor=\"main-thread\">\n            Compress in main-thread{\" \"}\n            {mainThread.progress && <span>{mainThread.progress} %</span>}\n            <input\n              id=\"main-thread\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => this.compressImage(e, false)}\n            />\n          </label>\n          <p>\n            {mainThread.inputSize && (\n              <span>Source image size: {mainThread.inputSize} mb</span>\n            )}\n            {mainThread.outputSize && (\n              <span>, Output image size: {mainThread.outputSize}</span>\n            )}\n          </p>\n        </div>\n        {(mainThread.inputUrl || webWorker.inputUrl) && (\n          <table>\n            <thead>\n              <tr>\n                <td>input preview</td>\n                <td>output preview</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <img\n                    src={mainThread.inputUrl || webWorker.inputUrl}\n                    alt=\"input\"\n                  />\n                </td>\n                <td>\n                  <img\n                    src={mainThread.outputUrl || webWorker.outputUrl}\n                    alt=\"output\"\n                  />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}